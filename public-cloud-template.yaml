AWSTemplateFormatVersion: 2010-09-09
Description: Public Cloud Project

Parameters:

  LatestAL2023AmiId:
    Description: Latest EC2 Amazon Linux 2023 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  
  VPCIdentifier:
    Type: String
    Description: VPC Identifier
    Default: Osaka-Public-VPC

  VPCNetworkAddress:
    Type: String
    Description: VPC Network Address
    Default: 10.1.0.0/16
    
Resources:
##############################################################################################################################################
# NETWORK LAYER 
##############################################################################################################################################


############################################
# Public Cloud VPC
# Resource Type: EC2 VPC
# Layer Type: Network Layer 
# Description:
# DependsOn: None
############################################

  PublicCloudVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCNetworkAddress
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCIdentifier

############################################
# Internet Gateway
# Resource Type: EC2 Internet Gateway
# Layer Type: Network Layer 
# Description: Create a resource for InternetGateway
# DependsOn: 
#     -  PublicCloudVPC
############################################

  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    DependsOn: PublicCloudVPC
    Properties:
      Tags:
        - Key: Name
          Value: Public Cloud VPC Internet Gateway

############################################
# VPC Gateway Attachment
# Resource Type: EC2 VPC Gateway Attachment
# Layer Type: Network Layer 
# Description: Attach Internet Gateway to Public Cloud VPC
# DependsOn: 
#     - InternetGateWay
#     - PublicCloudVPC
############################################

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateWay
      VpcId: !Ref PublicCloudVPC


############################################
# Public Subnet 1
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description: Public Subnet 1 in Public Cloud VPC
# DependsOn: 
#   - PublicCloudVPC
############################################

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: 10.1.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PublicSubnet1

############################################
# Public Subnet 2
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description: Public Subnet 2 in Public Cloud VPC
# DependsOn: 
#   - PublicCloudVPC
############################################

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: 10.1.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PublicSubnet2

############################################
# NATGatewayForPublicSubnet1
# Resource Type: EC2 NAT Gateway
# Layer Type: Network Layer 
# Description:
# DependsOn: 
#   - PublicCloudVPC
#   - ElasticIPAddressforNATGatewayPublicSubnet1
#   - PublicSubnet1
############################################

  NATGatewayForPublicSubnet1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddressforNATGatewayPublicSubnet1.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: PublicSubnet1-NATGateway

############################################
# ElasticIPAddressforNATGatewayPublicSubnet1
# Resource Type: EC2 EIP
# Layer Type: Network Layer 
# Description: Elastic IP Address attached to NAT Gateway for Public Subnet 1
# DependsOn: None
############################################

  ElasticIPAddressforNATGatewayPublicSubnet1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PublicSubnet1-NATGateway-Elastic-IP 

############################################
# NATGatewayForPublicSubnet2
# Resource Type: EC2 NAT Gateway
# Layer Type: Network Layer 
# Description:
# DependsOn: 
#   - PublicCloudVPC
#   - ElasticIPAddressforNATGatewayPublicSubnet2
#   - PublicSubnet2
############################################

  NATGatewayForPublicSubnet2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddressforNATGatewayPublicSubnet2.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: PublicSubnet2-NATGateway

############################################
# ElasticIPAddressforNATGatewayPublicSubnet2
# Resource Type: EC2 EIP
# Layer Type: Network Layer 
# Description: Elastic IP Address attached to NAT Gateway for Public Subnet 2
# DependsOn: None
############################################

  ElasticIPAddressforNATGatewayPublicSubnet2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PublicSubnet2-NATGateway-Elastic-IP 


############################################
# PublicRouteTableAssociationPublicSubnet1
# Resource Type: EC2 Subnet Route Table Association
# Layer Type: Network Layer
# Description: Public Route Table associating Public Subnet 1
# DependsOn:
#   - PublicRouteTable
#   - PublicSubnet1
############################################

  PublicRouteTableAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


############################################
# PublicRouteTableAssociationPublicSubnet2
# Resource Type: EC2 Subnet Route Table Association
# Layer Type: Network Layer
# Description: Public Route Table associating Public Subnet 2
# DependsOn:
#   - PublicRouteTable
#   - PublicSubnet2
############################################

  PublicRouteTableAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


############################################
# Public Route Table
# Resource Type: EC2 RouteTable
# Layer Type: Network Layer
# Description: 
# DependsOn:
#   - PublicCloudVPC
############################################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicCloudVPC
      Tags:
        - Key: Name
          Value: Public Route Table

############################################
# PublicRoute
# Resource Type: EC2 Route
# Layer Type: Network Layer
# Description: Create a Route in Public Routing Table to accept any connection from the Internet Gateway
# DependsOn:
#   - PublicRouteTable
#   - InternetGateWay
############################################

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateWay
      RouteTableId: !Ref PublicRouteTable


############################################
# Private Subnet 1
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description:
# DependsOn: 
#   - PublicCloudVPC
############################################

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

############################################
# Private Subnet 2
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description: 
# DependsOn: 
#   - PublicCloudVPC
############################################

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet2


############################################
# Private Route Table App
# Resource Type: EC2 Route Table
# Layer Type: Network Layer
# Description: Private Routing Table for Private Subnet
# DependsOn: 
#   - PublicCloudVPC
############################################

  PrivateRouteTableForPrivateSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicCloudVPC
      Tags:
        - Key: Name
          Value: Private Route Table App

############################################
# ApplicationServerPrivateRoute1
# Resource Type: EC2 Route
# Layer Type: Network Layer 
# Description: Private Route in Private Subnet for Application Server and it finds the destination to the NAT Gateway in Public Subnet 1
# DependsOn: 
#   - PrivateRouteTableForPrivateSubnet
#   - NATGatewayForPublicSubnet1
############################################

  ApplicationServerPrivateRoute1:            
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGatewayForPublicSubnet1



############################################
# ApplicationServerPrivateRoute2
# Resource Type: EC2 Route
# Layer Type: Network Layer 
# Description: Private Route in Private Subnet for Application Server and it finds the destination to the NAT Gateway in Public Subnet 2
# DependsOn: 
#   - PrivateRouteTableForPrivateSubnet
#   - NATGatewayForPublicSubnet2
############################################

  ApplicationServerPrivateRoute2:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      DestinationCidrBlock: 0.0.0.0/24
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGatewayForPublicSubnet2



############################################
# PrivateRouteTableAssociationForPrivateSubnet1
# Resource Type: SubnetRouteTableAssociation
# Layer Type: Network Layer
# Description: Associate Private Subnet 1 to Private Route Table
# DependsOn:
#   - PrivateRouteTableForPrivateSubnet
#   - PrivateSubnet2
############################################

  PrivateRouteTableAssociationForPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      SubnetId: !Ref PrivateSubnet1

############################################
# Private Route Table Association For Private Subnet 2
# Resource Type: SubnetRouteTableAssociation
# Layer Type: Network Layer
# Description: Associate Private Subnet 2 to Private Route Table
# DependsOn:
#   - PrivateRouteTableForPrivateSubnet
#   - PrivateSubnet2
############################################

  PrivateRouteTableAssociationForPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      SubnetId: !Ref PrivateSubnet2







##############################################################################################################################################
# SECURITY LAYER 
##############################################################################################################################################


############################################
# Application Load Balancer Security Group
# Layer Type: Network Layer 
# Description: Allow HTTP for Application Load Balancer
# DependsOn: 
#   - PublicCloudVPC
############################################

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP for Application Load Balancer
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

############################################
# Application Security Group
# Resource Type: Security Group
# Layer Type: Network Layer 
# Description: Allow HTTP for EC2 Instance hosting Application
# DependsOn: 
#   - PublicCloudVPC
#   - ApplicationLoadBalancerSecurityGroup
############################################

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP for EC2 Instance hosting Application
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup

############################################
# Linux Bastion Security Group
# Resource Type: Security Group
# Layer Type: Network Layer 
# Description: Allow HTTP for EC2 Instance hosting Application
# DependsOn: 
#   - PublicCloudVPC
############################################

  LinuxBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Linux-Bastion-SG
      GroupDescription: Enable access to SSH
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 #Allow HTTP Traffic from any IPv4 address
      Tags:
        - Key: Name
          Value: Linux-Bastion-Security-Group

############################################
# Web Server SSH Security Group
# Resource Type: Security Group
# Layer Type: Security Layer 
# Description: A Security Group for Web Server to allow SSH access from Linux Bastion Security Group
# DependsOn: None
############################################

  WebServerSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Web-Server-SSH-SG
      GroupDescription: Enable access to SSH
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt LinuxBastionSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: Web-Server-SSH-Security-Group

############################################
# Linux Bastion Host One Key Pair
# Resource Type: EC2 KeyPair
# Layer Type: Security Layer 
# Description: Create the Keypair for Linux Bastion Host One
# DependsOn: None
############################################

  LinuxBastionHostOneKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: Linux-Bastion-Host-One-Key-Pair

############################################
# Linux Bastion Host Two Key Pair
# Resource Type: EC2 KeyPair
# Layer Type: Security Layer 
# Description: Create the Keypair for Linux Bastion Host Two
# DependsOn: None
############################################

  LinuxBastionHostTwoKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: Linux-Bastion-Host-Two-Key-Pair



##############################################################################################################################################
# COMPUTE LAYER 
##############################################################################################################################################


############################################
# Linux Bastion Host 1
# Resource Type: EC2 Instance
# Layer Type: Compute Layer 
# Description: To provide secure access to Web Server 1 via SSH
# DependsOn: 
#   - PublicSubnet1
#   - LinuxBastionSecurityGroup
############################################

  LinuxBastionHost1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAL2023AmiId
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref LinuxBastionHostOneKeyPair
      SecurityGroupIds:
        - !Ref LinuxBastionSecurityGroup
      Tags:
        - Key: Name
          Value: LinuxBastionHost1
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - DeviceName: /dev/xvdb
          NoDevice: {}
      Monitoring: false



############################################
# Linux Bastion Host 2
# Resource Type: EC2 Instance
# Layer Type: Compute Layer 
# Description: To provide secure access to Web Server 2 via SSH
# DependsOn: 
#   - PublicSubnet2
#   - LinuxBastionSecurityGroup
############################################

  LinuxBastionHost2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAL2023AmiId
      SubnetId: !Ref PublicSubnet2
      KeyName: !Ref LinuxBastionHostTwoKeyPair
      SecurityGroupIds:
        - !Ref LinuxBastionSecurityGroup
      Tags:
        - Key: Name
          Value: LinuxBastionHost2
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - DeviceName: /dev/xvdb
          NoDevice: {}
      Monitoring: false


############################################
# EC2 Instance - Web Server 1
# Resource Type: EC2 Instance
# Layer Type: Compute Layer 
# Description: Allow HTTP for EC2 Instance hosting Application
# DependsOn: 
#   - PublicSubnet2
#   - LinuxBastionSecurityGroup
############################################

  WebServer1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAL2023AmiId
      SubnetId: !Ref PrivateSubnet1
      #KeyName: !Ref WebServerOneKeyPair
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
        - !Ref WebServerSSHSecurityGroup
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash -ex
                dnf -y update
              
                dnf -y install httpd
                dnf -y install git
                dnf -y install stress

                cd /var/www/html/
                
                # Clone the Git Repository containing the Sample PHP application
                sudo git clone https://github.com/AngKokLeong/Multi-Cloud-Capstone-Project-Sample-Webpage.git
                
                # Move every item from Multi-Cloud-Capstone-Project-Sample-Webpage to /var/www/html/
                sudo mv Multi-Cloud-Capstone-Project-Sample-Webpage/* ./
                sudo rm -rf Multi-Cloud-Capstone-Project-Sample-Webpage 

                chkconfig httpd on
                service httpd start

                chown -R ec2-user:ec2-user /var/www/html
      Tags:
        - Key: Name
          Value: WebServer1
      #IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - DeviceName: /dev/xvdb
          NoDevice: {}
      Monitoring: false


# Create AMI
#https://repost.aws/knowledge-center/ec2-systems-manager-ami-automation
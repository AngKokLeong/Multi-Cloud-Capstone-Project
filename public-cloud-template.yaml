AWSTemplateFormatVersion: 2010-09-09
Description: Public Cloud Project

Parameters:

  LatestAL2023AmiId:
    Description: Latest EC2 Amazon Linux 2023 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  
  VPCIdentifier:
    Type: String
    Description: VPC Identifier
    Default: Osaka-Public-VPC

  VPCNetworkAddress:
    Type: String
    Description: VPC Network Address
    Default: 10.1.0.0/16

  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    Description: The EC2 instance type to launch


  PublicSubnet1CidrBlock:
    Type: String
    Default: 10.1.3.0/24
    Description: The CIDR block for the Public Subnet 1
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


  PublicSubnet2CidrBlock:
    Type: String
    Default: 10.1.4.0/24
    Description: The CIDR block for the Public Subnet 2
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PrivateSubnet1CidrBlock:
    Type: String
    Default: 10.1.1.0/24
    Description: The CIDR block for the Private Subnet 1
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PrivateSubnet2CidrBlock:
    Type: String
    Default: 10.1.2.0/24 
    Description: The CIDR block for the Private Subnet 2
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnet1AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create resources
    ConstraintDescription: must be a valid Availability Zone for the specified AWS Region

  PublicSubnet2AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create resources
    ConstraintDescription: must be a valid Availability Zone for the specified AWS Region

  PrivateSubnet1AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create resources
    ConstraintDescription: must be a valid Availability Zone for the specified AWS Region


  PrivateSubnet2AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create resources
    ConstraintDescription: must be a valid Availability Zone for the specified AWS Region


    
Resources:
##############################################################################################################################################
# NETWORK LAYER 
##############################################################################################################################################


############################################
# Public Cloud VPC
# Resource Type: EC2 VPC
# Layer Type: Network Layer 
# Description:
# DependsOn: None
############################################

  PublicCloudVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCNetworkAddress
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCIdentifier

############################################
# Internet Gateway
# Resource Type: EC2 Internet Gateway
# Layer Type: Network Layer 
# Description: Create a resource for InternetGateway
# DependsOn: 
#     -  PublicCloudVPC
############################################

  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    DependsOn: PublicCloudVPC
    Properties:
      Tags:
        - Key: Name
          Value: Public Cloud VPC Internet Gateway

############################################
# VPC Gateway Attachment
# Resource Type: EC2 VPC Gateway Attachment
# Layer Type: Network Layer 
# Description: Attach Internet Gateway to Public Cloud VPC
# DependsOn: 
#     - InternetGateWay
#     - PublicCloudVPC
############################################

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateWay
      VpcId: !Ref PublicCloudVPC


############################################
# Public Subnet 1
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description: Public Subnet 1 in Public Cloud VPC
# DependsOn: 
#   - PublicCloudVPC
############################################

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref PublicSubnet1AvailabilityZone
      Tags:
        - Key: Name
          Value: PublicSubnet1

############################################
# Public Subnet 2
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description: Public Subnet 2 in Public Cloud VPC
# DependsOn: 
#   - PublicCloudVPC
############################################

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref PublicSubnet2AvailabilityZone
      Tags:
        - Key: Name
          Value: PublicSubnet2

############################################
# NATGatewayForPublicSubnet1
# Resource Type: EC2 NAT Gateway
# Layer Type: Network Layer 
# Description:
# DependsOn: 
#   - PublicCloudVPC
#   - ElasticIPAddressforNATGatewayPublicSubnet1
#   - PublicSubnet1
############################################

  NATGatewayForPublicSubnet1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddressforNATGatewayPublicSubnet1.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: PublicSubnet1-NATGateway

############################################
# ElasticIPAddressforNATGatewayPublicSubnet1
# Resource Type: EC2 EIP
# Layer Type: Network Layer 
# Description: Elastic IP Address attached to NAT Gateway for Public Subnet 1
# DependsOn: None
############################################

  ElasticIPAddressforNATGatewayPublicSubnet1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PublicSubnet1-NATGateway-Elastic-IP 

############################################
# NATGatewayForPublicSubnet2
# Resource Type: EC2 NAT Gateway
# Layer Type: Network Layer 
# Description:
# DependsOn: 
#   - PublicCloudVPC
#   - ElasticIPAddressforNATGatewayPublicSubnet2
#   - PublicSubnet2
############################################

  NATGatewayForPublicSubnet2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddressforNATGatewayPublicSubnet2.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: PublicSubnet2-NATGateway

############################################
# ElasticIPAddressforNATGatewayPublicSubnet2
# Resource Type: EC2 EIP
# Layer Type: Network Layer 
# Description: Elastic IP Address attached to NAT Gateway for Public Subnet 2
# DependsOn: None
############################################

  ElasticIPAddressforNATGatewayPublicSubnet2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: PublicSubnet2-NATGateway-Elastic-IP 


############################################
# PublicRouteTableAssociationPublicSubnet1
# Resource Type: EC2 Subnet Route Table Association
# Layer Type: Network Layer
# Description: Public Route Table associating Public Subnet 1
# DependsOn:
#   - PublicRouteTable
#   - PublicSubnet1
############################################

  PublicRouteTableAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


############################################
# PublicRouteTableAssociationPublicSubnet2
# Resource Type: EC2 Subnet Route Table Association
# Layer Type: Network Layer
# Description: Public Route Table associating Public Subnet 2
# DependsOn:
#   - PublicRouteTable
#   - PublicSubnet2
############################################

  PublicRouteTableAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


############################################
# Public Route Table
# Resource Type: EC2 RouteTable
# Layer Type: Network Layer
# Description: 
# DependsOn:
#   - PublicCloudVPC
############################################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicCloudVPC
      Tags:
        - Key: Name
          Value: Public Route Table

############################################
# PublicRoute
# Resource Type: EC2 Route
# Layer Type: Network Layer
# Description: Create a Route in Public Routing Table to accept any connection from the Internet Gateway
# DependsOn:
#   - PublicRouteTable
#   - InternetGateWay
############################################

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateWay
      RouteTableId: !Ref PublicRouteTable


############################################
# Private Subnet 1
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description:
# DependsOn: 
#   - PublicCloudVPC
############################################

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Ref PrivateSubnet1AvailabilityZone
      Tags:
        - Key: Name
          Value: PrivateSubnet1

############################################
# Private Subnet 2
# Resource Type: EC2 Subnet
# Layer Type: Network Layer 
# Description: 
# DependsOn: 
#   - PublicCloudVPC
############################################

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicCloudVPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Ref PrivateSubnet2AvailabilityZone
      Tags:
        - Key: Name
          Value: PrivateSubnet2


############################################
# Private Route Table App
# Resource Type: EC2 Route Table
# Layer Type: Network Layer
# Description: Private Routing Table for Private Subnet
# DependsOn: 
#   - PublicCloudVPC
############################################

  PrivateRouteTableForPrivateSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicCloudVPC
      Tags:
        - Key: Name
          Value: Private Route Table App

############################################
# ApplicationServerPrivateRoute1
# Resource Type: EC2 Route
# Layer Type: Network Layer 
# Description: Private Route in Private Subnet for Application Server and it finds the destination to the NAT Gateway in Public Subnet 1
# DependsOn: 
#   - PrivateRouteTableForPrivateSubnet
#   - NATGatewayForPublicSubnet1
############################################

  ApplicationServerPrivateRoute1:            
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGatewayForPublicSubnet1



############################################
# ApplicationServerPrivateRoute2
# Resource Type: EC2 Route
# Layer Type: Network Layer 
# Description: Private Route in Private Subnet for Application Server and it finds the destination to the NAT Gateway in Public Subnet 2
# DependsOn: 
#   - PrivateRouteTableForPrivateSubnet
#   - NATGatewayForPublicSubnet2
############################################

  ApplicationServerPrivateRoute2:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      DestinationCidrBlock: 0.0.0.0/24
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGatewayForPublicSubnet2



############################################
# PrivateRouteTableAssociationForPrivateSubnet1
# Resource Type: SubnetRouteTableAssociation
# Layer Type: Network Layer
# Description: Associate Private Subnet 1 to Private Route Table
# DependsOn:
#   - PrivateRouteTableForPrivateSubnet
#   - PrivateSubnet2
############################################

  PrivateRouteTableAssociationForPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      SubnetId: !Ref PrivateSubnet1

############################################
# Private Route Table Association For Private Subnet 2
# Resource Type: SubnetRouteTableAssociation
# Layer Type: Network Layer
# Description: Associate Private Subnet 2 to Private Route Table
# DependsOn:
#   - PrivateRouteTableForPrivateSubnet
#   - PrivateSubnet2
############################################

  PrivateRouteTableAssociationForPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableForPrivateSubnet
      SubnetId: !Ref PrivateSubnet2

############################################
# Application Load Balancer
# Resource Type: ElasticLoadBalancingV2 LoadBalancer
# Layer Type: Network Layer
# Description: Create an application load balancer that associate itself with Public Subnets and it receives connection from the internet
# DependsOn:
#   - ApplicationLoadBalancerSecurityGroup
#   - PublicSubnet1
#   - PublicSubnet2
############################################


  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: application-load-balancer
      Scheme: internet-facing
      IpAddressType: ipv4 
      SecurityGroups: 
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

############################################
# Application Load Balancer Listener
# Resource Type: ElasticLoadBalancingV2 Listener
# Layer Type: Network Layer
# Description: An Application Load Balancer listener that listens for any connection request from HTTP Port 80
# DependsOn:
#   - ApplicationLoadBalancer
#   - WebServerTargetGroup
############################################


  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !GetAtt WebServerTargetGroup.TargetGroupArn
      LoadBalancerArn: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
      Port: 80
      Protocol: HTTP

############################################
# Web Server Target Group
# Resource Type: ElasticLoadBalancingV2 Target Group
# Layer Type: Network Layer
# Description: A Target Group that is used by Application Load Balancer and this target group registers EC2 Instance into the group it detects automatically
#              There is another function in this resource which considers the user experience of the Web users in the E-Commerce website and it provides a stable connection 
#              without switching the user to another server due to the server load for up to 30 seconds.
# DependsOn:
#   - PublicCloudVPC
############################################

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref PublicCloudVPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: app_cookie
        - Key: stickiness.app_cookie.duration_seconds
          Value: 30
        - Key: stickiness.app_cookie.cookie_name
          Value: TESTCOOKIE



##############################################################################################################################################
# SECURITY LAYER 
##############################################################################################################################################


############################################
# EC2 Instance Profile
# Resource Type: IAM InstanceProfile
# Layer Type: Security Layer 
# Description: 
# DependsOn: 
#   - WebServerRole
############################################

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref WebServerRole]
      InstanceProfileName: EC2-Instance-Profile

############################################
# Web Server Role
# Resource Type: IAM Role
# Layer Type: Security Layer 
# Description: 
# DependsOn: None
############################################

  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Web-Server-Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: secretsaccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                      - secretsmanager:CreateSecret
                      - secretsmanager:GetSecretValue
                      - secretsmanager:DescribeSecret
                      - secretsmanager:PutSecretValue
                      - secretsmanager:ListSecrets
                      - secretsmanager:UpdateSecret
                Resource: !Sub arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*



############################################
# Application Load Balancer Security Group
# Resource Type: Security Group
# Layer Type: Security Layer 
# Description: A Security Group to allow HTTP Port 80 for any IP Address to enter Application Load Balancer
# DependsOn: 
#   - PublicCloudVPC
############################################

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP for Application Load Balancer
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

############################################
# Application Security Group
# Resource Type: Security Group
# Layer Type: Network Layer 
# Description: Allow HTTP for EC2 Instance hosting Application
# DependsOn: 
#   - PublicCloudVPC
#   - ApplicationLoadBalancerSecurityGroup
############################################

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP for EC2 Instance hosting Application
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup

############################################
# Linux Bastion Security Group
# Resource Type: Security Group
# Layer Type: Network Layer 
# Description: Allow HTTP for EC2 Instance hosting Application
# DependsOn: 
#   - PublicCloudVPC
############################################

  LinuxBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Linux-Bastion-SG
      GroupDescription: Enable access to SSH
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 #Allow HTTP Traffic from any IPv4 address
      Tags:
        - Key: Name
          Value: Linux-Bastion-Security-Group

############################################
# Web Server SSH Security Group
# Resource Type: Security Group
# Layer Type: Security Layer 
# Description: A Security Group for Web Server to allow SSH access from Linux Bastion Security Group
# DependsOn: None
############################################

  WebServerSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Web-Server-SSH-SG
      GroupDescription: Enable access to SSH
      VpcId: !Ref PublicCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt LinuxBastionSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: Web-Server-SSH-Security-Group





############################################
# Linux Bastion Host One Key Pair
# Resource Type: EC2 KeyPair
# Layer Type: Security Layer 
# Description: Create the Keypair for Linux Bastion Host One
# DependsOn: None
############################################

  LinuxBastionHostOneKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: Linux-Bastion-Host-One-Key-Pair

############################################
# Linux Bastion Host Two Key Pair
# Resource Type: EC2 KeyPair
# Layer Type: Security Layer 
# Description: Create the Keypair for Linux Bastion Host Two
# DependsOn: None
############################################

  LinuxBastionHostTwoKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: Linux-Bastion-Host-Two-Key-Pair




############################################
# Web Server Key Pair
# Resource Type: EC2 KeyPair
# Layer Type: Security Layer 
# Description: A KeyPair for Web Server EC2 Instance which the Launch Template will use 
# DependsOn: None
############################################

  WebServerKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: Web-Server-Key-Pair


##############################################################################################################################################
# COMPUTE LAYER 
##############################################################################################################################################


############################################
# Linux Bastion Host 1
# Resource Type: EC2 Instance
# Layer Type: Compute Layer 
# Description: To provide secure access to Web Server 1 via SSH
# DependsOn: 
#   - PublicSubnet1
#   - LinuxBastionSecurityGroup
############################################

  LinuxBastionHost1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAL2023AmiId
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref LinuxBastionHostOneKeyPair
      SecurityGroupIds:
        - !Ref LinuxBastionSecurityGroup
      Tags:
        - Key: Name
          Value: LinuxBastionHost1
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - DeviceName: /dev/xvdb
          NoDevice: {}
      Monitoring: false



############################################
# Linux Bastion Host 2
# Resource Type: EC2 Instance
# Layer Type: Compute Layer 
# Description: To provide secure access to Web Server 2 via SSH
# DependsOn: 
#   - PublicSubnet2
#   - LinuxBastionSecurityGroup
############################################

  LinuxBastionHost2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAL2023AmiId
      SubnetId: !Ref PublicSubnet2
      KeyName: !Ref LinuxBastionHostTwoKeyPair
      SecurityGroupIds:
        - !Ref LinuxBastionSecurityGroup
      Tags:
        - Key: Name
          Value: LinuxBastionHost2
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
        - DeviceName: /dev/xvdb
          NoDevice: {}
      Monitoring: false

############################################
# Auto Scaling Group
# Resource Type: AutoScaling AutoScalingGroup
# Layer Type: Compute Layer 
# Description: An Auto Scaling Group that creates EC2 Instance (Web Server) based on the WebServerLaunchTemplate 
#              by using the WebServerTargetGroup to determine which are the EC2 instances to monitor 
#              The key metric which the AutoScalingGroup uses through the TargetTrackingScaling Policy is the Average CPU Utilization
#              If the CPU Utilization is above 70%, new EC2 Instance will spawn between the two private subnets (PrivateSubnet1 or PrivateSubnet2)
# DependsOn: 
#   - PrivateSubnet1
#   - PrivateSubnet2
#   - ExampleLaunchTemplate
#   - WebServerTargetGroup
############################################

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Fn::GetAtt: [PrivateSubnet1, SubnetId]
        - Fn::GetAtt: [PrivateSubnet2, SubnetId] 
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "CPUUtilization"
      TargetGroupARNs:
        - !GetAtt WebServerTargetGroup.TargetGroupArn
      Tags:
        - Key: Name
          Value: WebServer
          PropagateAtLaunch: true


############################################
# Target Tracking Scaling Policy
# Resource Type: AutoScaling Scaling Policy
# Layer Type: Compute Layer 
# Description: 
# DependsOn: 
#   - AutoScalingGroup
############################################

  TargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 25.0
      EstimatedInstanceWarmup: 60


############################################
# Web Server Launch Template
# Resource Type: AutoScaling Scaling Policy
# Layer Type: Compute Layer 
# Description: The Web Server Launch template is a template for creating EC2 Instance and it is attached with WebServerKeyPair that allows SSH access
#              UserData is written with bash script to setup the environment in EC2 Instance when it first create
#              Security Groups are attached to this Launch template where ApplicationSecurityGroup allows HTTP port 80 and WebServerSSHSecurityGroup allows HTTP port 22
# DependsOn: 
#   - LatestAL2023AmiId
#   - WebServerKeyPair
#   - AutoScalingGroup
#   - ApplicationSecurityGroup
#   - WebServerSSHSecurityGroup
############################################

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        KeyName: !Ref WebServerKeyPair
        ImageId: !Ref LatestAL2023AmiId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: "Name"
                Value: "Web Server"

        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - EC2InstanceProfile
            - Arn
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
          - !Ref WebServerSSHSecurityGroup
        UserData:
          Fn::Base64: !Sub | 
              #!/bin/bash -ex
                dnf -y update
              
                dnf -y install httpd
                dnf -y install git
                dnf -y install stress

                cd /var/www/html/
                
                # Clone the Git Repository containing the Sample application
                sudo git clone https://github.com/AngKokLeong/Multi-Cloud-Capstone-Project-Sample-Webpage.git
                
                # Move every item from AWS-Cloud-Architect-Capstone-Sample-PHP-Application to /var/www/html/
                sudo mv Multi-Cloud-Capstone-Project-Sample-Webpage/* ./
                sudo rm -rf Multi-Cloud-Capstone-Project-Sample-Webpage

                chkconfig httpd on
                service httpd start
                
                chown -R ec2-user:ec2-user /var/www/html

      LaunchTemplateName: Web-Server-Launch-Template



Outputs:
  ApplicationLoadBalancerDNS:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  LinuxBastionHostOneKeyPairID:
    Value: !GetAtt LinuxBastionHostOneKeyPair.KeyPairId
    Description: Key Pair ID for Linux Bastion Host One

  LinuxBastionHostTwoKeyPairID:
    Value: !GetAtt LinuxBastionHostTwoKeyPair.KeyPairId
    Description: Key Pair ID for Linux Bastion Host Two

  WebServerKeyPairID:
    Value: !GetAtt WebServerKeyPair.KeyPairId
    Description: Key Pair ID for Web Server

  LinuxBastionHostOnePublicIPAddress:
    Value: !GetAtt LinuxBastionHost1.PublicIp
    Description: Public IP Address for Linux Bastion Host One

  LinuxBastionHostTwoPublicIPAddress:
    Value: !GetAtt LinuxBastionHost2.PublicIp
    Description: Public IP Address for Linux Bastion Host Two

  VpcId: 
    Value: !GetAtt PublicCloudVPC.VpcId
    Description: VPC ID